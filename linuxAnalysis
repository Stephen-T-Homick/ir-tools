#!/bin/bash

# Create output directory
OUTPUT_DIR="/tmp/intrusion_detection_output"
mkdir -p "$OUTPUT_DIR"

# Create an output file for the results
OUTPUT_FILE="$OUTPUT_DIR/output.txt"
echo "Intrusion Detection Analysis - $(date)" > "$OUTPUT_FILE"
echo "--------------------------------------" >> "$OUTPUT_FILE"

# Function to capture failed login attempts
capture_failed_logins() {
    echo "=== Failed Login Attempts ===" >> "$OUTPUT_FILE"
    grep "Failed password" /var/log/auth.log >> "$OUTPUT_FILE 2>&1"
    grep "Failed password" /var/log/secure >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture successful login attempts
capture_successful_logins() {
    echo "=== Successful Login Attempts ===" >> "$OUTPUT_FILE"
    grep "Accepted password" /var/log/auth.log >> "$OUTPUT_FILE 2>&1"
    grep "Accepted password" /var/log/secure >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture current processes
capture_processes() {
    echo "=== Current Processes ===" >> "$OUTPUT_FILE"
    ps auxf >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture network activity
capture_network_activity() {
    echo "=== Current Network Connections ===" >> "$OUTPUT_FILE"
    ss -tulnp >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture last login information
capture_login_locations() {
    echo "=== Last Login Locations ===" >> "$OUTPUT_FILE"
    last -a >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture user accounts
capture_user_accounts() {
    echo "=== User Accounts ===" >> "$OUTPUT_FILE"
    cat /etc/passwd >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture sudo usage
capture_sudo_usage() {
    echo "=== Sudo Usage ===" >> "$OUTPUT_FILE"
    grep "sudo" /var/log/auth.log >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture suspicious commands in history
capture_command_history() {
    echo "=== Suspicious Commands in User Histories ===" >> "$OUTPUT_FILE"
    for user in $(ls /home); do
        if [ -f "/home/$user/.bash_history" ]; then
            echo "User: $user" >> "$OUTPUT_FILE"
            grep -E "rm -rf|wget|curl|ssh|sudo|chmod|chown|bash -i" "/home/$user/.bash_history" >> "$OUTPUT_FILE 2>&1"
            echo "" >> "$OUTPUT_FILE"
        fi
    done
}

# Function to capture system configuration
capture_system_configuration() {
    echo "=== System Configuration ===" >> "$OUTPUT_FILE"
    uname -a >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture kernel logs
capture_kernel_logs() {
    echo "=== Kernel Logs ===" >> "$OUTPUT_FILE"
    dmesg | tail -n 50 >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to capture user information
capture_user_info() {
    echo "=== Currently Logged In Users ===" >> "$OUTPUT_FILE"
    who >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to find recent file modifications
capture_file_modifications() {
    echo "=== Recent File Modifications (Last 7 Days) ===" >> "$OUTPUT_FILE"
    find / -type f -mtime -7 -exec ls -l {} \; >> "$OUTPUT_FILE 2>&1"
    echo "" >> "$OUTPUT_FILE"
}

# Function to create tarballs of specified directories
create_directory_copies() {
    echo "Creating tarballs of specified directories..." >> "$OUTPUT_FILE"
    local DIRS=("/etc" "/proc" "/home" "/var")
    for dir in "${DIRS[@]}"; do
        tar -czf "$OUTPUT_DIR/$(basename "$dir").tar.gz" "$dir" >> "$OUTPUT_FILE 2>&1"
    done
    echo "" >> "$OUTPUT_FILE"
}

# Function to create a main tarball with results and directory copies
create_tarball() {
    tar -czf /tmp/intrusion_detection_results.tar.gz -C /tmp intrusion_detection_output
}

# Run the checks
capture_failed_logins
capture_successful_logins
capture_processes
capture_network_activity
capture_login_locations
capture_user_accounts
capture_sudo_usage
capture_command_history
capture_system_configuration
capture_kernel_logs
capture_user_info
capture_file_modifications
create_directory_copies

# Create a tarball with the results
create_tarball

# Complete the analysis
echo "Analysis complete. Results saved to $OUTPUT_FILE."
echo "Tarball created at /tmp/intrusion_detection_results.tar.gz."
